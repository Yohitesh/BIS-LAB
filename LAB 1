import random
import numpy as np

# Grid size and obstacle map
GRID_SIZE = 10
OBSTACLES = {(3, 3), (3, 4), (4, 3), (5, 5), (6, 6)}
START = (0, 0)
GOAL = (9, 9)
MAX_STEPS = 2 * GRID_SIZE

DIRECTIONS = ['U', 'D', 'L', 'R']
MOVE_DELTA = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}

# Create initial population
def create_chromosome():
    return [random.choice(DIRECTIONS) for _ in range(MAX_STEPS)]

def move_robot(chromosome):
    x, y = START
    path = [START]
    for move in chromosome:
        dx, dy = MOVE_DELTA[move]
        nx, ny = x + dx, y + dy
        if 0 <= nx < GRID_SIZE and 0 <= ny < GRID_SIZE and (nx, ny) not in OBSTACLES:
            x, y = nx, ny
            path.append((x, y))
        else:
            path.append((x, y))  # Robot stays if move is invalid
    return path

# Fitness: inverse of distance to goal (plus penalty for long path)
def fitness(chromosome):
    path = move_robot(chromosome)
    end = path[-1]
    dist = abs(end[0] - GOAL[0]) + abs(end[1] - GOAL[1])
    return 1 / (dist + 1)

def selection(population):
    return max(random.sample(population, 3), key=fitness)

def crossover(parent1, parent2):
    point = random.randint(1, MAX_STEPS - 1)
    return parent1[:point] + parent2[point:]

def mutate(chromosome, mutation_rate=0.1):
    return [gene if random.random() > mutation_rate else random.choice(DIRECTIONS)
            for gene in chromosome]

def genetic_algorithm(generations=200, population_size=100):
    population = [create_chromosome() for _ in range(population_size)]
    best = None

    for gen in range(generations):
        new_population = []
        for _ in range(population_size):
            p1, p2 = selection(population), selection(population)
            child = crossover(p1, p2)
            child = mutate(child)
            new_population.append(child)

        population = new_population
        best = max(population, key=fitness)

        if gen % 10 == 0 or fitness(best) > 0.9:
            print(f"Gen {gen}: Best fitness = {fitness(best):.4f}")

        if move_robot(best)[-1] == GOAL:
            print(f"Goal reached at generation {gen}!")
            break

    return best, move_robot(best)

# Run GA
best_chromosome, path = genetic_algorithm()

# Print results
print("\nBest path:")
print(path)


OUTPUT:-

Gen 0: Best fitness = 0.1429
Gen 9: Best fitness = 1.0000
Goal reached at generation 9!

Best path:
[(0, 0), (0, 1), (1, 1), (1, 2), (1, 3), (2, 3), (2, 4), (2, 5), (2, 6), (3, 6), (3, 7), (3, 8), (4, 8), (5, 8), (5, 9), (6, 9), (7, 9), (8, 9), (8, 9), (8, 9), (9, 9)]
